name: Build Backend

on:
  workflow_call:
    inputs:
      target-environment:
        required: true
        type: string
      backend-url:
        required: true
        type: string
      user-pool-id:
        required: true
        type: string
      user-pool-client-id:
        required: true
        type: string
      user-pool-client-secret:
        required: true
        type: string
    outputs:
      version-info:
        description: "The backend version info"
        value: ${{ jobs.build.outputs.version-info }}
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    outputs:
        version-info: ${{ steps.setVersionInfo.outputs.version-info }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: backend/yarn.lock
      - name: Install dependencies
        run: yarn install
        working-directory: backend
      - name: Set Version Info
        id: setVersionInfo
        # see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        # for multiline strings
        run: |
          ./pipeline/setVersionInfo.sh ./backend/src/applicationInfo/version.json
          cat ./backend/src/applicationInfo/version.json
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "version-info<<$EOF" >> "$GITHUB_OUTPUT"
          echo "$(cat ./backend/src/applicationInfo/version.json)" >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"
      - name: Lint
        run: yarn run lint
        working-directory: backend
      - name: Build
        run: yarn run build
        working-directory: backend
      - name: Generate OpenAPI
        run: |
          yarn run generate:openapi
          yarn run generate:swagger
          yarn run generate:redoc
        working-directory: backend
      - name: Archive build bundle
        uses: actions/upload-artifact@v4
        with:
          name: backend.build.folder
          path: backend/build/
          retention-days: 1
      - name: Cache mongodb binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/mongodb-binaries
          key: ${{ runner.os }}-mongodb-binaries
      - name: Test
        run: yarn run test
        working-directory: backend
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: backend.lcov.info
          path: backend/coverage/lcov.info
          retention-days: 1
#  test-integration:
#    runs-on: ubuntu-latest
#    environment: ${{ inputs.target-environment }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Use Node.js 20.x
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20.x
#          cache: 'yarn'
#          cache-dependency-path: backend/yarn.lock
#      - name: Install dependencies
#        run: yarn install
#        working-directory: backend
#      - name: Run Integration Tests
#        run: yarn run test:integration
#        working-directory: backend
#        env:
#          BACKEND_URL: ${{ inputs.backend-url }}
#          USER_POOL_ID: ${{ inputs.user-pool-id }}
#          USER_POOL_CLIENT_ID: ${{ inputs.user-pool-client-id }}
#          USER_POOL_CLIENT_SECRET: ${{ inputs.user-pool-client-secret }}
#          TEST_MODEL_MANAGER_USERNAME: ${{ secrets.TEST_MODEL_MANAGER_USERNAME }}
#          TEST_MODEL_MANAGER_PASSWORD: ${{ secrets.TEST_MODEL_MANAGER_PASSWORD }}
#          TEST_REGISTERED_USER_USERNAME: ${{ secrets.TEST_REGISTERED_USER_USERNAME }}
#          TEST_REGISTERED_USER_PASSWORD: ${{ secrets.TEST_REGISTERED_USER_PASSWORD }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
