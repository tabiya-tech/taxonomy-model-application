name: Setup Ephemeral Database

on:
  workflow_call:
    inputs:
      target-environment:
        required: true
        type: string
      version-info:
        required: true
        type: string
      stack-name:
        required: true
        type: string
      mongo_uri:
        required: true
        type: string
      frontend-version-info:
        required: true
        type: string
      backend-version-info:
        required: true
        type: string
    outputs:
      stack-name:
        description: "This is a sanitized branch"
        value: ${{ jobs.sanitized-branch.outputs.sanitized_branch }}
      mongo_uri:
        description:  "Mongo URI"
        value:  ${{ needs.deploy-db.outputs.mongo_uri }}
      backedRestApiURLBase:
        description: "The backend api url"
        value: ${{ needs.deploy.outputs.backedRestApiURLBase }}
      resourcesBaseUrl:
        description: "The resources base url"
        value: ${{ needs.deploy.outputs.resourcesBaseUrl }}
      frontendURLBase:
        description: "The frontend url"
        value: ${{ needs.deploy.outputs.frontendURLBase }}
      backendURLBase:
        description: "The backend url"
        value: ${{ needs.deploy.outputs.backendURLBase }}
      frontendBucketWebsiteURLBase:
        description: "The frontend bucket url"
        value: ${{ needs.deploy.outputs.frontendBucketWebsiteURLBase }}

jobs:
  # Sanitize Branch
  sanitized-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Sanitize Branch Name
        id: sanitized-branch
        run: |
          # Fetch branch name
          branch_name=${GITHUB_REF#refs/heads/}
          sanitized_name=$(echo $branch_name | sed -e 's/[^a-zA-Z0-9-]/-/g')
          echo "sanitized_branch=$sanitized_name" >> "$GITHUB_OUTPUT"
  # Deploy DB
  deploy-db:
    runs-on: ubuntu-latest
    environment: ${{ needs.deploy-db.outputs.stack-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up MongoDB Atlas
        run: |
          sudo apt-get update
          sudo apt-get install gnupg
          wget -qO - https://pgp.mongodb.com/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-atlas
      - name: Configure MongoDB CLI
        run: |
          atlas config set org_id ${{ secrets.MONGODB_ORG_ID }}
          atlas config set project_id ${{ secrets.MONGODB_PROJECT_ID_NEW }}
          atlas config set public_api_key "${{ secrets.MONGODB_PUBLIC_API_KEY }}"
          atlas config set private_api_key "${{ secrets.MONGODB_PRIVATE_KEY }}"
      - name: Create database
        run: |
          atlas cluster create Cluster0 --projectId ${{ secrets.MONGODB_PROJECT_ID_NEW }} --provider AWS --region US_EAST_1 --tier M0 --output json
      - name: Get connection string
        id: get-branch
        run: |
          sleep 60
          output=$(atlas cluster connectionString describe Cluster0 --output json)
          standardSrv=$(echo "$output" | jq -r '.standardSrv')
          echo "standardSrv="$mongo_uri/${{ inputs.stack-name }}"" >> "$GITHUB_OUTPUT"
  # API Specifications
  build-api-specs:
    uses: ./.github/workflows/build-api-specs.yml
    secrets: inherit
  # Backend
  build-backend:
    uses: ./.github/workflows/build-backend.yml
    needs: [ build-api-specs ]
    secrets: inherit
  # Backend
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    outputs:
      backedRestApiURLBase: ${{ steps.pulumi.outputs.backedRestApiURLBase }}
      resourcesBaseUrl: ${{ steps.pulumi.outputs.resourcesBaseUrl }}
    needs:  [ build-backend ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
          cache-dependency-path: iac/yarn.lock
      - name: Install dependencies
        run: yarn install
        working-directory: iac
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Download backend.build.folder
        uses: actions/download-artifact@v3
        with:
          name: backend.build.folder
          path: backend/build/
      - name: Deploy backend
        id: pulumi
        uses: pulumi/actions@v4
        with:
          work-dir: iac/backend
          command: up
          stack-name: tabiya-tech/taxonomy-model-application-backend/${{ jobs.sanitized-branch.outputs.sanitized_branch }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          MONGODB_URI: ${{ needs.deploy-db.outputs.mongo_uri }}
  # Frontend
  build-frontend:
    uses: ./.github/workflows/build-frontend.yml
    needs: [ build-api-specs ]
    secrets: inherit
  deploy-frontend:
    needs: [ build-frontend ]
    secrets: inherit
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    outputs:
      frontendBucketWebsiteURLBase: ${{ steps.pulumi.outputs.frontendBucketWebsiteURLBase }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
          cache-dependency-path: iac/yarn.lock
      - name: Install dependencies
        run: yarn install
        working-directory: iac
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Download frontend.build.folder
        uses: actions/download-artifact@v3
        with:
          name: frontend.build.folder
          path: frontend/build/
      - name: Deploy frontend
        id: pulumi
        uses: pulumi/actions@v4
        with:
          work-dir: iac/frontend
          command: up
          stack-name: tabiya-tech/taxonomy-model-application-frontend/${{ jobs.sanitized-branch.outputs.sanitized_branch }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  # Common Infrastructure
  deploy-common:
    needs: [ deploy-frontend, build-frontend, deploy-backend, build-backend ]
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    outputs:
      backendURLBase: ${{ steps.pulumi.outputs.backendURLBase }}
      frontendURLBase: ${{ steps.pulumi.outputs.frontendURLBase }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
          cache-dependency-path: iac/yarn.lock
      - name: Install dependencies
        run: yarn install
        working-directory: iac
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Deploy Common Infrastructure
        id: pulumi
        uses: pulumi/actions@v4
        with:
          work-dir: iac/common
          command: up
          stack-name: tabiya-tech/taxonomy-model-application-common/${{ jobs.sanitized-branch.outputs.sanitized_branch }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  # Nameserver
  deploy-nameserver:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'yarn'
          cache-dependency-path: iac/yarn.lock
      - name: Install dependencies
        run: yarn install
        working-directory: iac
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: Deploy nameserver
        id: pulumi
        uses: pulumi/actions@v4
        with:
          work-dir: iac/nameserver
          command: up
          stack-name: tabiya-tech/taxonomy-model-application-nameserver/${{ jobs.sanitized-branch.outputs.sanitized_branch }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
